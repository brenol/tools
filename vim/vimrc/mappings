" *****************************************************************************
"  MAPPINGS
" *****************************************************************************
" vim: ft=vim

" --------------------------------------------------------------------------
"  grep.vim
" --------------------------------------------------------------------------
nnoremap <silent> <leader>f :Rgrep<CR>

" --------------------------------------------------------------------------
"  VimShell
" --------------------------------------------------------------------------
nnoremap <silent> <leader>sh :VimShellCreate<CR>

" --------------------------------------------------------------------------
"  CtrlP
" --------------------------------------------------------------------------
let g:ctrlp_prompt_mappings = {
			\ 'AcceptSelection("e")': ['<c-t>'],
			\ 'AcceptSelection("t")': ['<cr>', '<2-LeftMouse>'],
			\ }

" --------------------------------------------------------------------------
"  NERDTree
" --------------------------------------------------------------------------

" F2 toogles TabBar
nmap <F2> :NERDTreeTabsToggle<CR>

" LF finds the current file in the tree
nmap LF :NERDTreeFind<CR>

" --------------------------------------------------------------------------
" TagBar
" --------------------------------------------------------------------------

" F3 toogles TabBar
nmap <F3> :TagbarToggle<CR>

" --------------------------------------------------------------------------
"  Vim-Fugitive
" --------------------------------------------------------------------------
noremap <Leader>ga :!git add .<CR>
noremap <Leader>gc :!git commit -m '<C-R>="'"<CR>
noremap <Leader>gsh :!git push<CR>
noremap <Leader>gll :!git pull<CR>
noremap <Leader>gs :Gstatus<CR>
noremap <Leader>gb :Gblame<CR>
noremap <Leader>gd :Gvdiff<CR>
noremap <Leader>gr :Gremove<CR>

" --------------------------------------------------------------------------
"  EasyAlign
" --------------------------------------------------------------------------

" Start interactive EasyAlign in visual mode
vmap <Enter> <Plug>(EasyAlign)

" Start interactive EasyAlign with a Vim movement
nmap <Leader>a <Plug>(EasyAlign)

" --------------------------------------------------------------------------
"  SideWays.vim
" --------------------------------------------------------------------------
nnoremap <Leader>sr :SidewaysRight<cr>
nnoremap <Leader>sl :SidewaysLeft<cr>

" --------------------------------------------------------------------------
"  UltiSnips
" --------------------------------------------------------------------------
let g:UltiSnipsExpandTrigger="<C-e>"
let g:UltiSnipsJumpForwardTrigger="<tab>"
let g:UltiSnipsJumpBackwardTrigger="<c-b>"
let g:UltiSnipsEditSplit="vertical"

" --------------------------------------------------------------------------
"  GOLANG
" --------------------------------------------------------------------------
" Enable goimports to automatically insert import paths instead of gofmt:
let g:go_fmt_command = "goimports"

" Show a list of interfaces which is implemented by the type under your cursor
" with <leader>s
au FileType go nmap <Leader>s <Plug>(go-implements)

" Show type info for the word under your cursor with <leader>i
au FileType go nmap <Leader>i <Plug>(go-info)

" Open the relevant Godoc for the word under the cursor with <leader>gd or
" open it vertically with <leader>gv
au FileType go nmap <Leader>gd <Plug>(go-doc)
au FileType go nmap <Leader>gv <Plug>(go-doc-vertical)

" Run commands, such as go run with <leader>r for the current file or go build
" and go test for the current package with <leader>b and <leader>t. Display a
" beautiful annotated source code to see which functions are covered with
" <leader>c.
au FileType go nmap <leader>r <Plug>(go-run)
au FileType go nmap <leader>b <Plug>(go-build)
au FileType go nmap <leader>t <Plug>(go-test)
au FileType go nmap <leader>c <Plug>(go-coverage)

" By default the mapping gd is enabled which opens the target identifier in
" current buffer. You can also open the definition/declaration in a new
" vertical, horizontal or tab for the word under your cursor:
au FileType go nmap <Leader>ds <Plug>(go-def-split)
au FileType go nmap <Leader>dv <Plug>(go-def-vertical)
au FileType go nmap <Leader>dt <Plug>(go-def-tab)

" Rename the identifier under the cursor to a new name
au FileType go nmap <Leader>e <Plug>(go-rename)

" GoLint
au FileType go nmap <Leader>l :GoLint<cr>

" -----------------------------------------------------------------------------
" Plugin: vim-jsbeautify
" -----------------------------------------------------------------------------
autocmd FileType javascript     noremap  <buffer> <c-f> :call JsBeautify()<cr>
autocmd FileType json           noremap  <buffer> <c-f> :call JsonBeautify()<cr>
autocmd FileType html           noremap  <buffer> <c-f> :call HtmlBeautify()<cr>
autocmd FileType css            noremap  <buffer> <c-f> :call CSSBeautify()<cr>
autocmd FileType javascript     vnoremap <buffer> <c-f> :call RangeJsBeautify()<cr>
autocmd FileType json           vnoremap <buffer> <c-f> :call RangeJsonBeautify()<cr>
autocmd FileType html           vnoremap <buffer> <c-f> :call RangeHtmlBeautify()<cr>
autocmd FileType css            vnoremap <buffer> <c-f> :call RangeCSSBeautify()<cr>

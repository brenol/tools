" *****************************************************************************
"  CONFIG
" *****************************************************************************
" vim: ft=vim

" -----------------------------------------------------------------------------
" Visual Settigns
" -----------------------------------------------------------------------------
set statusline=%F%m%r%h%w%=(%{&ff}/%Y)\ (line\ %l\/%L,\ col\ %c)\ %{fugitive#statusline()}
silent! colorscheme badwolf

" -----------------------------------------------------------------------------
" vimshell
" -----------------------------------------------------------------------------
let g:vimshell_user_prompt = 'fnamemodify(getcwd(), ":~")'
let g:vimshell_prompt =  '$ '

" -----------------------------------------------------------------------------
" General mappings
" -----------------------------------------------------------------------------

" Search occurences of word under the cursor, displaying the results in the
" quickfix window
nnoremap <Leader>g :execute "vimgrep /" . expand("<cword>") . "/j **" <Bar> cw<CR>

" Indents the code, preserving the cursor position
nnoremap <Leader>f gg=G``  


" -----------------------------------------------------------------------------
" Plugin: NERDTree
" -----------------------------------------------------------------------------
let g:NERDTreeChDirMode=2
let g:NERDTreeIgnore=['\.rbc$', '\~$', '\.pyc$', '\.db$', '\.sqlite$', '__pycache__']
let g:NERDTreeSortOrder=['^__\.py$', '\/$', '*', '\.swp$', '\.bak$', '\~$']
let g:NERDTreeShowBookmarks=1
let g:nerdtree_tabs_focus_on_files=1
let g:NERDTreeMapOpenInTabSilent = '<RightMouse>'
let g:NERDTreeWinSize = 31

" -----------------------------------------------------------------------------
" Plugin: ctrlp.vim
" -----------------------------------------------------------------------------
let g:ctrlp_custom_ignore = '\v[\/]\.(git|hg|svn|tox)$'
let g:ctrlp_user_command = "find %s -type f | grep -Ev '"+ g:ctrlp_custom_ignore +"'"
let g:ctrlp_use_caching = 0
let g:ctrlp_working_path_mode = '0'
let g:ctrlp_max_files = 1000

" -----------------------------------------------------------------------------
" Plugin: syntastic
" -----------------------------------------------------------------------------
let g:syntastic_always_populate_loc_list=0
let g:syntastic_error_symbol='✗'
let g:syntastic_warning_symbol='⚠'
let g:syntastic_style_error_symbol = '✗'
let g:syntastic_style_warning_symbol = '⚠'
let g:syntastic_auto_loc_list=0
let g:syntastic_aggregate_errors = 1
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=0
let g:syntastic_stl_format = '[%E{Err: %fe #%e}%B{, }%W{Warn: %fw #%w}]'
let g:syntastic_mode_map = { 'mode': 'active',
			\ 'active_filetypes': ['python', 'php', 'javascript'],
			\ 'passive_filetypes': ['puppet', 'html'] }
let g:syntastic_python_checkers=['flake8']
let g:syntastic_python_flake8_post_args='--ignore=E501,E128,E225'

" -----------------------------------------------------------------------------
" Plugin: Tagbar
" -----------------------------------------------------------------------------
let g:tagbar_autofocus = 1
let g:tagbar_type_go = {
			\ 'ctagstype' : 'go',
			\ 'kinds'     : [  'p:package', 'i:imports:1', 'c:constants', 'v:variables',
			\ 't:types',  'n:interfaces', 'w:fields', 'e:embedded', 'm:methods',
			\ 'r:constructor', 'f:functions' ],
			\ 'sro' : '.',
			\ 'kind2scope' : { 't' : 'ctype', 'n' : 'ntype' },
			\ 'scope2kind' : { 'ctype' : 't', 'ntype' : 'n' },
			\ 'ctagsbin'  : 'gotags',
			\ 'ctagsargs' : '-sort -silent'
			\ }

" -----------------------------------------------------------------------------
" Plugin: vim-python
" -----------------------------------------------------------------------------
autocmd FileType python setlocal expandtab shiftwidth=4 tabstop=4 colorcolumn=99
			\ formatoptions+=croq softtabstop=4 smartindent
			\ cinwords=if,elif,else,for,while,try,except,finally,def,class,with

" -----------------------------------------------------------------------------
" Plugin: YouCompleteMe
" -----------------------------------------------------------------------------
set completeopt-=preview
let g:ycm_add_preview_to_completeopt = 0
let g:ycm_filepath_completion_use_working_dir = 1 

" -----------------------------------------------------------------------------
" Plugin: jedi-vim
" -----------------------------------------------------------------------------
let g:jedi#popup_on_dot = 0
let g:jedi#goto_assignments_command = "<Leader>g"
let g:jedi#goto_definitions_command = "<Leader>d"
let g:jedi#usages_command = "<Leader>n"
let g:jedi#rename_command = "<Leader>r"
let g:jedi#show_call_signatures = "0"
let g:jedi#completions_command = "<C-Space>"

" -----------------------------------------------------------------------------
" Plugin: javascript-libraries-syntax
" -----------------------------------------------------------------------------
let g:javascript_enable_domhtmlcss = 1
let g:used_javascript_libs = 'jquery,angularjs,requirejs'
autocmd BufReadPre *.js let b:javascript_lib_use_jquery = 1
autocmd BufReadPre *.js let b:javascript_lib_use_angularjs = 1
autocmd BufReadPre *.js let b:javascript_lib_use_requirejs = 1

" -----------------------------------------------------------------------------
" Plugin: pgsql.vim
" -----------------------------------------------------------------------------
let g:sql_type_default = 'pgsql'

" -----------------------------------------------------------------------------
" Plugin: numbers.vim
" -----------------------------------------------------------------------------
let g:numbers_exclude = ['unite', 'tagbar', 'vimshell', 'nerdtree']

" -----------------------------------------------------------------------------
" Plugin: lightline.vim
" -----------------------------------------------------------------------------
set noshowmode

let g:lightline = {
      \ 'component_function': {
      \   'filename': 'CustomFilename'
      \ }
      \ }

function! CustomFilename()
  return ('' != expand('%') ? expand('%') : '[No Name]')
endfunction


" -----------------------------------------------------------------------------
" Plugin: vim-go
" -----------------------------------------------------------------------------
let g:go_highlight_functions = 1
let g:go_highlight_methods = 1
let g:go_highlight_structs = 1

" -----------------------------------------------------------------------------
" Plugin: vim-easymotion
" -----------------------------------------------------------------------------
let g:EasyMotion_do_mapping = 0 " Disable default mappings

" Bi-directional find motion
" `s{char}{char}{label}`
" Need one more keystroke, but on average, it may be more comfortable.
nmap s <Plug>(easymotion-s2)

" Turn on case sensitive feature
let g:EasyMotion_smartcase = 1

" JK motions: Line motions
map <Leader>j <Plug>(easymotion-j)
map <Leader>k <Plug>(easymotion-k)

" -----------------------------------------------------------------------------
" Plugin: Goyo
" -----------------------------------------------------------------------------
let g:goyo_width=100
nnoremap <silent> <Leader>z :Goyo<cr>

function! s:goyo_enter()
endfunction

function! s:goyo_leave()
endfunction

autocmd User GoyoEnter nested call <SID>goyo_enter()
autocmd User GoyoLeave nested call <SID>goyo_leave()

" -----------------------------------------------------------------------------
" Plugin: vim-multiple-cursors
" -----------------------------------------------------------------------------
let g:multi_cursor_use_default_mapping=0
let g:multi_cursor_next_key='<C-S-n>'
let g:multi_cursor_prev_key='<C-S-p>'
let g:multi_cursor_skip_key='<C-S-x>'
let g:multi_cursor_quit_key='<Esc>'

" -----------------------------------------------------------------------------
" Plugin: vim-expand-region
" -----------------------------------------------------------------------------
map > <Plug>(expand_region_expand)
map < <Plug>(expand_region_shrink)

let g:expand_region_text_objects = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'ip'  :0,
      \ }

let g:expand_region_text_objects_html = {
      \ 'iw'  :0,
      \ 'iW'  :0,
      \ 'i"'  :0,
      \ 'i''' :0,
      \ 'i]'  :1,
      \ 'ib'  :1,
      \ 'iB'  :1,
      \ 'ip'  :0,
      \ 'it'  :1,
      \ 'at'  :1,
      \ }
